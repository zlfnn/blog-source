zlf123jy@163.com z920723lf

npm ====================
命令：npm install package_name
//npm install bootstrap@1.2  --save-dev  下载生成环境时的包
命令: npm init       package.js文件
//  npm init  --yes   参数走默认配置
删除包： npm uninstall package_name

先全局安装
npm install -g cnpm --registry=https://registry.npm.taobao.org
 - npm install xxx -g(全局安装包) 
      默认在：c:\users\iceStone\AppData\Roaming\npm 

bower ===============
npm install -g bower // -g:global
	（修改npm全局路径，就是在用户目录下添加.npmrc文件
文件中有
cache=C:\Develop\nvm\npm-cache
prefix=C:\Develop\nvm\npm
）

$ # 初始化一个Bower的配置文件
$ bower init
$ # 安装一个包
$ bower install bootstrap#1.2
$ # GitHub shorthand
$ bower install desandro/masonry
$ # Git endpoint
$ bower install git://github.com/user/package.git
$ # URL
$ bower install http://example.com/script.js
$ # 安装一个包并将其添加到配置文件
$ bower install bootstrap --save
$ # 卸载一个包
$ bower uninstall bootstrap
$ # 更新所有的包
$ bower update

gulp=================

- 安装 gulp 命令行工具
    + `npm install -g gulp`
    + -g 指的是在全局作用域中安装
    + 测试命令 gulp -v 
- 初始化 gulp 项目
    + 在本地安装gulp包
    + npm install gulp --save-dev  开发阶段依赖的东西
- 创建任务 - gulpfile.js
    + gulpfile.js 就是gulp的主文件
Gulp  任务名字 启动任务


- [globs匹配语法](https://github.com/isaacs/node-glob)
    + src/\*
    + src/\*/\*
    + src/\*\*/\*
    + src/\*.jpg
    + src/\*.{jpg,png}
    + 多个globs
        * ['src/\*.{jpg,png}','a/a.html']
- 排除某些文件
    + !xxxxx
- 默认任务
    + gulp 中的任务名有个特殊值 default
- 文件监视自动执行任务


- https://browsersync.io/docs/
 命令：npm install browser-sync --save-dev




（1）初始化一个本地GIT仓储repository
cd 当前项目目录
命令：git init // 初始化一个本地的仓库(隐藏的文件夹)
（2）查看本地仓储的变更状态
命令:git status
git status -s // -s 是输出简要的变更日志

（3）添加本地暂存（托管）文件
命令: git add .    .就是根目录
命令:git add --all 添加所有的变化

（4）添加本地GIT忽略清单文件
在代码库文件夹的根目录添加一个.gitignore文件，写文件名

（5）提交被托管的文件变化到本地仓储
命令: git commit
命令: git commit -m '第一次提交代码到本地仓库'

（6）对比差异
命令:git diff
可以用于对比当前状态和版本库中状态的变化
（7）必须要有提交日志
命令: git log 
可以查看提交日志
（8）回归到指定版本
	git reset --hard  (六位commit的前 git log 查看）
强制的返回修改前的版本

（9）为仓储添加远端（服务器端）地址
（10）将本地仓储的提交记录推送到远端的master分支
（11）拉取远端master分支的更新记录到本地
（12）回归到指定版本



-创建分支：git branch gh-pages (名字固定的)
  zlfnn.github.io/wjs2来访问网页

提交后在
首先在github上创建一个仓库
在执行一下命令：
git文件下双击打开git-bash.exe
定位到目录cd c\day\git-demo\
$ git remote add origin https://github.com/zlfnn/blog.git
$ git remote
$ git remote -v
$ git status
$ git log
$ git push -u origin master 上传文件 线上也可以编辑代码
$ git pull origin master  拉回文件
git remote add origin https://github.com/zlfnn/cc.git
2、GIT分支
创建分支
C:\day\git-demo>git branch
* master 
C:\day\git-demo>git branch gh-pages
C:\day\git-demo>git branch
* master
  v2
C:\day\git-demo>git checkout v2 //切换分支
C:\day\git-demo>git branch
  master
* v2
C:\day\git-demo>git push -u origin v2
C:\day\git-demo>git status
C:\day\git-demo>git add --all
C:\day\git-demo>git commit -m 'v2版本的第一次提交'
C:\day\git-demo>git push -u origin v2


添加：git add --all
提交：git commit -m '第一次提交代码到本地仓库'
上传：git push -u origin v2


九、hexo 博客
静态网站生成器
网址：hexo.io
安装：全局命令安装 
npm install hexo-cli -g

在source文件夹中写 md文件


使用 hexo init blog(文件夹名)
    cd (文件夹)
    npm install  //安装依赖
 运行 hexo serve  

hexo bulid 查看有什么命令
 hexo generate 生成静态页面，根据md文件在public文件夹下 
里面有bog的主题



===============
安装前提
node
git
//npm install -g hexo-cli

Mac 用户
您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，
Xcode 完成后，启动并进入 Preferences -> Download -> Command Line Tools -> Install 安装命令行工具。

================
建站
$ hexo init <folder>
$ cd <folder>
$ npm install


scaffolds
模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。

Hexo的模板是指在新建的markdown文件中默认填充的内容。
例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。


source
资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。
Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。


================
命令
$ hexo init [folder]  ----新建一个网站
$ hexo new [layout] <title>  -- 新建一篇文章
$ hexo generate   --  生成静态文件。
	-d, --deploy	文件生成后立即部署网站
	-w, --watch	监视文件变动
$ hexo publish [layout] <filename>  -- 发表草稿。

$ hexo server  --启动服务器。默认情况下，访问网址为： http://localhost:4000/。
 	 -p, --port	重设端口
	-s, --static	只使用静态文件
	-l, --log	启动日记记录，使用覆盖记录格式

$ hexo deploy  --部署网站。  -g, --generate	部署之前预先生成静态文件

$ hexo render <file1> [file2] ...  渲染文件。

 	参数	描述
	-o, --output	设置输出路径

$ hexo migrate <type>   从其他博客系统 迁移内容。

$ hexo clean   清除缓存文件 (db.json) 和已生成的静态文件 (public)。
$ hexo --draft   --显示 source/_drafts 文件夹中的草稿文章。

================
写文章

$ hexo new [layout] <title>
Hexo 有三种默认布局：post、page 和 draft
布局	路径
post	source/_posts
page	source
draft	source/_drafts